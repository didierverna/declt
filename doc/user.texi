\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2013, 2015-2022 Didier Verna

@c Author: Didier Verna <didier@didierverna.net>

@c This file is part of Declt.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.

@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:



@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename declt-user.info
@settitle The Declt User Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 4.0 beta 3 "William Riker"
@set COPYRIGHT_YEARS 2010--2013, 2015--2022, 2024
@setchapternewpage odd
@documentdescription
The Declt User Manual for version @value{VERSION}.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@macro declt
@t{Declt}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro nil
@code{nil}
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------

@c ---------------
@c Indexing macros
@c ---------------

@c Concept index
@c -------------

@c Configuration options
@macro coindex{name}
@vindex net.didierverna.declt.configuration
@cindex Configuration option, @t{:\name\}
@cindex @t{:\name\}
@end macro


@c Functions index
@c ---------------

@c Function options
@macro foindex{func,opt}
@findex \func\@r{, option, }\opt\
@end macro

@c Function keys
@macro fkindex{func,key}
@findex \func\@r{, key, }\key\
@end macro


@c Variables index
@c ---------------

@c Constant variables
@macro cvindex{var}
@vindex \var\
@vindex @r{Constant, }\var\
@end macro

@c Parameter variables
@macro pvindex{var}
@vindex \var\
@vindex @r{Parameter, }\var\
@end macro


@c Data Types index
@c ----------------

@c Packages
@macro pkgindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro sysindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Classes
@macro clsindex{name}
@tpindex \name\
@tpindex @r{Class, }\name\
@end macro

@c Class slots
@macro clssindex{cls,slot}
@tpindex \cls\@r{, slot, }\slot\
@tpindex @r{Class, }\cls\@r{, slot, }\slot\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Declt User Manual: (declt-user).      The Declt User Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_YEARS} Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Declt User Manual
@subtitle Documentation Extractor from @cl{} to Texinfo, Version @value{VERSION}
@author Didier Verna <@email{didier@@didierverna.net}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Declt User Manual
This is the @declt{} User Manual for @declt{} version @value{VERSION}.

@menu
* Copying::                     The BSD license
* Introduction::                Declt at a glance
* Installation::                Library and documentation
* Quick Start::                 For the brave and the impatient
* Overview::                    The Declt pipeline
* Global Usage::                Documenting your library in one shot
* Pipeline Usage::              Documenting your library in three steps
* Other Considerations::        Miscellaneous information
* Conclusion::                  That's all folks
* Documentation Tuning::        Adjusting your own coding style
* Supported Platforms::         Portability, dependencies, etc.
* Indexes::                     Concepts, functions, variables and data types
* Acknowledgments::             Hall of Pride
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Installation, Copying, Top
@chapter Introduction
@cindex Library
@declt{} (pronounce ``dec'let'') is a reference manual generator for
@cl{} libraries. A @declt{} manual documents one specified ASDF system
(considered as the ``main'' system), and all its local dependencies
(subsystems found in the same distribution). This is what is
collectively referred to as the @dfn{library}.

@cindex Definition
@declt{} doesn't perform any kind of static code analysis, but instead
loads the library, and then introspects the Lisp environment to discover
what ``belongs'' to it. The generated documentation includes the
description of both programmatic and ASDF components. Every such
component description is called a @dfn{definition}.

@declt{} manuals provide a detailed description of the library's
infrastructure by including definitions for every relevant ASDF
component (systems, modules, and files), and Lisp package.

Exported programmatic definitions are split from the internal ones,
which allows to separately browse either the library's public interface
or its implementation. Both sections of the manual include definitions
for constants, special variables, symbol macros, macros, setf expanders,
compiler macros, regular functions (including setf ones), generic
functions and methods (including setf ones), method combinations,
conditions, structures, classes, and types.

Programmatic definitions are as complete and exhaustive as introspection
can make them. @declt{} collects documentation strings, lambda lists
(including qualifiers and specializers where appropriate), slot
definitions (including type information, allocation type, initialization
arguments, @etc{}), definition sources, @etc{}

Every definition includes a full set of cross-references to related
ones: ASDF component dependencies, parents, and children, classes direct
methods, super- and sub-classes, slot readers and writers, setf
expanders access and update functions, @etc{}

Finally, @declt{} produces exhaustive and multiple-entry indexes to all
documented aspects of the library.

@declt{} manuals are generated in Texinfo format. From there it is
possible to produce readable / printable output in Info, HTML, PDF,
Postscript, @etc{}

The primary example of documentation generated by @declt{} is the
@declt{}
@ifinfo
@ref{Top, , Reference Manual, declt-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo



@c ====================================================================
@c Installation
@c ====================================================================
@node Installation, Quick Start, Introduction, Top
@chapter Installation
First of all, see @declt{}'s
@url{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php#declt,homepage}
for tarballs, Git repository and online documentation. @declt{} is an
ASDF 3 library, and currently works with SBCL only. If you download a
@declt{} tarball, or clone the repository, you need to unpack somewhere
in the ASDF source registry. Otherwise, @declt{} is also available via
@uref{http://www.quicklisp.org,,Quicklisp}. @xref{Supported Platforms},
for more information on portability and dependencies.

In addition to the bare Lisp library, the @declt{} distribution offers
documentation in the form of 2 different manuals: the User Manual (you
are reading it) and the @declt{}
@ifinfo
@ref{Top, , Reference Manual, declt-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo
The latter is generated by @declt{} itself. If you want to compile the
manuals by yourself, please follow the instructions below.
@enumerate
@item
Edit @file{make/config.make} to your specific needs. In particular, you
will see a number of external programs that are required in order to
compile the manuals in there (@pxref{Supported Platforms}).
@item
Type @command{make}. By default, the documentation is built in Info,
PDF, and HTML formats. If you want other formats (DVI and Postscript are
available), type @command{make all-formats}. You can also type
individually @command{make dvi} and/or @command{make ps} in order to get
the corresponding format.
@item
Type @command{make install} to install the documentation. If you have
compiled the documentation in DVI and Postscript format, those will be
installed as well.
@end enumerate

The reference manual's Texinfo source is included in the distribution
(and in the repository), although, as mentioned before, it is generated
by @declt{} itself. Before compiling, it is possible to regenerate a
local version of it with hyperlinks to your installation by typing
@command{make localref}. If you ever need to regenerate the regular
version, you can also type @command{make generate}.

Type @command{make uninstall} to uninstall the library.



@c ====================================================================
@c Installation
@c ====================================================================
@node Quick Start, Overview, Installation, Top
@chapter Quick Start
In your favorite Lisp REPL, type this.

@findex nickname-package
@findex declt
@cartouche
@verbatim
(asdf:load-system :net.didierverna.declt) ;; or use ql:quickload
(net.didierverna.declt:nickname-package)
(declt:declt :my.asdf.system)
@end verbatim
@end cartouche

You will end up with a file named @file{my.asdf.system.texi} in the
current directory. This is a Texinfo file that can further be compiled
into various formats, such as Info, HTML, or PDF. For example, in order
to get a PDF, type this in the same directory: @samp{makeinfo --pdf
my.asdf.system.texi}, and enjoy reading the resulting
@file{my.asdf.system.pdf}@enddots{}



@c ====================================================================
@c Overview
@c ====================================================================
@node Overview, Global Usage, Quick Start, Top
@chapter Overview
@findex declt
@findex assess
@findex assemble
@findex typeset
@declt{} is implemented as a 3 stages pipeline, as depicted in the
figure below. The @code{declt} function, already mentioned in
@ref{Quick Start} triggers the whole pipeline, but for more advanced
usage, each stage of the pipeline can be accessed separately and
directly via their respective entry point functions: @code{assess},
@code{assemble}, and @code{typeset}.

@ifinfo
@center@image{declt-user-data/pipeline,15cm}
@end ifinfo
@ifnotinfo
@center@image{pipeline,15cm}
@end ifnotinfo

@enumerate
@item
@cindex Assessment
@cindex Report
@clsindex{report}
The first stage of the pipeline is called the @dfn{assessment} stage. At
this stage, @declt{} loads the library, and then introspects the Lisp
environment in order to extract the pertinent information. This
information is stored in a so-called @dfn{report}.
@xref{Assessment} for more information.
@item
@cindex Assembly
@cindex Script
@cindex Layout
The second stage of the pipeline is called the @dfn{assembly} stage. At
this stage, @declt{} organizes the (completely flat) information
provided by a report in a specific way. The result is called a
@dfn{script}. A script begins to look like a properly organized
reference manual, but it is still independent from the final output
format. The specific organization scheme to use is called a
@dfn{layout}. @xref{Assembly} for more information.
@item
@cindex Typesetting
Finally, the third stage of the pipeline is called the @dfn{typesetting}
stage. At this stage, @declt{} renders a script to a file by
typesetting its contents in a specific documentation format. This may
directly result in a human-readable reference manual, although in the
case of Texinfo, the resulting file needs additional post-processing.
This, however, is not done by @declt{} itself, but by
@command{makeinfo}, which is an external tool. @xref{Typesetting} for
more information.
@end enumerate

@findex declt
@findex assess
@findex assemble
@findex typeset
Again, when you call @code{(declt system)}, the 3 stages of the pipeline
are chained automatically, which is more or less equivalent to calling
@code{(typeset (assemble (assess system)))} (@pxref{Global Usage}).



@c ====================================================================
@c Global Usage
@c ====================================================================
@node Global Usage, Pipeline Usage, Overview, Top
@chapter Global Usage
This chapter explains how to use @declt{} to trigger the whole pipeline
(@pxref{Overview}), that is, to go directly from a library to a
reference manual.

@sysindex{net.didierverna.declt}
@declt{}'s main system is called @samp{net.didierverna.declt}. Depending
on your installation, you may thus either @code{asdf:load-system}, or
@code{ql:quickload} it in your Lisp image.

@pkgindex{net.didierverna.declt}
@declt{}'s main package is called @t{net.didierverna.declt}. You can
automatically nickname this package with the following function.
@cindex Package nickname
@defun nickname-package [nickname]
Add @var{NICKNAME} (@code{:declt} by default) to the
@code{:net.didierverna.declt} package.
@end defun

In order to trigger the whole pipeline, use the @code{declt} function,
which currently generates a Texinfo file containing the reference
manual. This file may in turn be compiled into a variety of
human-readable formats with the @command{makeinfo} program.
@defun declt system-name :key value@dots{}
Generate a reference manual in Texinfo format for ASDF
@var{SYSTEM-NAME}.@*
@var{SYSTEM-NAME} is an ASDF system designator.
@end defun

The @code{declt} function accepts a number of keyword arguments which
affect the behavior of every stage of the pipeline (they are in fact
passed along to the corresponding functions, which see). The following
sections describe these keyword arguments.

@menu
* Assessment Options::          Controlling the extracted material
* Assembly Options::            Controlling how it is documented
* Typesetting Options::         Controlling the generated files
@end menu


@c ------------------
@c Assessment Options
@c ------------------
@node Assessment Options, Assembly Options, Global Usage, Global Usage
@section Assessment Options
@findex assess
Most of the documented material is extracted automatically by @declt{},
although sometimes it is difficult to get it right, if at all. From time
to time, you may also want to override @declt{}'s default choices. The
following options provide control over the extraction mechanism and
result. They are passed along to the @code{assess} function
(@pxref{Assessment}), along with the library's system designator.

@table @code
@item :introspection-level
@fkindex{declt,introspection-level}
@fkindex{assess,introspection-level}
How hard @declt{} introspects the Lisp environment in order to find
information. Possible values currently are @code{1} (the default) or
@code{2}. The @declt{} introspection heuristic establishes different
compromises between completeness and performance. A higher introspection
level will result in a more complete documentation, at the expense of a
(much) greater computation time. @xref{Introspection Levels} for more
information.
@item :library-name
@fkindex{declt,library-name}
@fkindex{assess,library-name}
The library name, used in the reference manual title and at some other
places. It defaults to the system name, but you are encouraged to
provide a more human-readable version (for example @t{Declt} rather than
just @t{net.didierverna.declt}).
@item :tagline
@fkindex{declt,tagline}
@fkindex{assess,tagline}
A tagline for the library, used in the reference manual subtitle, or
@nil{}. It defaults to the system's long name or description (one-liners
only), but see @ref{Taglines}.
@item :library-version
@fkindex{declt,library-version}
@fkindex{assess,library-version}
The library version, used in the reference manual subtitle and at some
other places, or @nil{}. It defaults to the system version (one-liner
only).
@item :contact
@fkindex{declt,contact}
@fkindex{assess,contact}
The contact(s) for the library, or @nil{}. The default is extracted from
the system definition (the @code{maintainer} and @code{author} slots,
possibly also the @code{mailto} one; one-liners only). You may provide a
contact string, or a list of such. A contact string is of the form
@code{"My Name <my@@address>"}, both name and address being optional.
@item :copyright-years
@fkindex{declt,copyright-years}
@fkindex{assess,copyright-years}
Copyright year(s) used to typeset copyright header lines, or @nil{} to
disable those lines. It defaults to the current year. You may use any
kind of string here, such as @code{"2013"}, @code{"2010, 2011"},
@code{"2010--2013"} @etc{}
@item :license
@fkindex{declt,license}
@fkindex{assess,license}
@pvindex{*licenses*}
The library's license type (@nil{} by default). This information is used
to insert licensing information at several places in the manual. The
possible non-@nil{} values are: @code{:mit}, @code{:boost}, @code{:bsd},
@code{:gpl}, @code{:lgpl}, and @code{:ms-pl}. The corresponding license
file headers are stored in the @code{*licenses*} parameter. Please ask
if you need other kinds of licenses added to @declt{}. Note that this
information is @strong{not} currently extracted from the system's
@t{license} slot, as this slot is not well defined.
@item :introduction
@fkindex{declt,introduction}
@fkindex{assess,introduction}
A potential contents for an introductory chapter (none by default). In
the future, this material may be extracted from a README file or such.
@item :conclusion
@fkindex{declt,conclusion}
@fkindex{assess,conclusion}
A potential contents for a conclusive chapter (none by default).
@end table

Note that both the introduction and the conclusion may contain Texinfo
directives (no post-processing will occur). All other textual material
is considered raw text and will be properly escaped for Texinfo.


@c ----------------
@c Assembly Options
@c ----------------
@node Assembly Options, Typesetting Options, Assessment Options, Global Usage
@section Assembly Options
@findex assemble
Based on the report created by the first stage of the @declt{} pipeline,
the exact contents of the upcoming reference manual can be further
adjusted thanks to the following options. They are passed along to the
@code{assemble} function (@pxref{Assembly}), along with the library's
report.

@table @code
@item :declt-notice
@fkindex{declt,declt-notice}
@fkindex{assemble,declt-notice}
Controls the output of a small paragraph about automatic manual
generation by @declt{}. Possible values are @nil{} (meaning don't
acknowledge @declt{}), @code{:short}, and @code{:long} (the
default). A @code{:short} paragraph advertises @declt{} with its
version number. A @code{:long} one also prints its release code name and
the generation time. I would be grateful if you kept at least the short
version in your manuals, as an acknowledgment for using @declt{}.
@item :locations
@fkindex{declt,locations}
@fkindex{assemble,locations}
Whether to hyperlink definitions to their locations. It defaults to
@nil{}. A value of @code{:file-system} means to create hyperlinks on the
local machine, on which @declt{} is currently being run. These links
being completely specific to the current installation, it is better to
avoid this option if the reference manual is meant to be put online.
@item :default-values
@fkindex{declt,default-values}
@fkindex{assemble,default-values}
Whether to document standard / default values. The default is @nil{}.
Otherwise, @declt{} will explicitly mention properties that do not
differ from their default or standard value, such as a @t{standard}
method combination, an @t{:instance} slot allocation, @etc{}
@item :foreign-definitions
@cindex Foreign definition
@cindex Definition, foreign
@fkindex{declt,foreign-definitions}
@fkindex{assemble,foreign-definitions}
Whether to include foreign definitions in the documentation. It defaults
to @nil{}, in which case foreign references are still advertised, but do
not point to actual definitions (they are not ``clickable''). Otherwise,
only foreign definitions somehow related to the library are considered
for inclusion, and they will most of the time be partial rather than
exhaustive: only the bits relevant to the library are documented. For
more information on foreign definitions, see @ref{Domesticity}.
@end table


@c -------------------
@c Typesetting Options
@c -------------------
@node Typesetting Options,  , Assembly Options, Global Usage
@section Typesetting Options
@findex typeset
Finally, the typesetting of the script produced by the second stage of
the @declt{} pipeline may be adjusted with the following options. They
are passed along to the @code{typeset} function (@pxref{Typesetting}),
along with the library's script.

@table @code
@item :output-directory
@fkindex{declt,output-directory}
@fkindex{typeset,output-directory}
The generated file's directory. It defaults to the current directory.
@item :file-name
@fkindex{declt,file-name}
@fkindex{typeset,file-name}
The base name of the generated file, sans extension. It defaults to the
system name.
@item :info-name
@fkindex{declt,info-name}
@fkindex{typeset,info-name}
The base name of the Info file, sans extension. It defaults to
@var{FILE-NAME}. This option is provided because the Info file name
appears in the Texinfo source.
@item :info-category
@fkindex{declt,info-category}
@fkindex{typeset,info-category}
The category under which the documentation will be listed in Info
browsers. This corresponds to the @code{@@dircategory} command in
Texinfo, and defaults to @code{"Common Lisp"}.
@end table



@c ====================================================================
@c Pipeline Usage
@c ====================================================================
@node Pipeline Usage, Other Considerations, Global Usage, Top
@chapter Pipeline Usage
This chapter provides additional information on how each stage of the
@declt{} pipeline works, and how to use them separately.

@menu
* Assessment::                  Extracting information
* Assembly::                    Organizing the documentation
* Typesetting::                 Creating a human-readable reference manual
@end menu

@c ----------
@c Assessment
@c ----------
@node Assessment, Assembly, Pipeline Usage, Pipeline Usage
@section Assessment
As mentioned before (@pxref{Overview}), the first stage of the @declt{}
pipeline, called the ``assessment'' stage, loads the library, and then
introspects the Lisp environment in order to extract the pertinent
information.

@sysindex{net.didierverna.declt.assess}
@pkgindex{net.didierverna.declt.assess}
The assessment part of @declt{} is provided as a separate system called
@samp{net.didierverna.declt.assess}, which you may load individually
(@declt{}'s main system depends on it). It also comes in a separate
package called @samp{net.didierverna.declt.assess} (imported by
@declt{}'s main package).

In order to assess a library, use the @code{assess} function.
@defun assess system-name :key value@dots{}
Extract and return documentation information for ASDF
@var{SYSTEM-NAME}.@*
@var{SYSTEM-NAME} is an ASDF system designator.
@end defun

@findex declt
@clsindex{report}
The complete list of keyword arguments, also recognized by the global
@declt{} function, is described in @ref{Assessment Options}. This
function returns an instance of the @code{report} class. The following
sections provide additional information on the assessment's
operation, and some details on the @code{report} class.

@menu
* Domesticity::                 What belongs to the library
* Introspection Levels::        Computing definitions
* Reports::                     Notes on the report class
@end menu

@c Domesticity
@c -----------
@node Domesticity, Introspection Levels, Assessment, Assessment
@subsection Domesticity
@cindex Domesticity
Domesticity is the concept defining what ``belongs'' to the library. It
ultimately affects what can appear in the reference manual, and what
cannot.

@cindex Domestic definition
@cindex Definition, domestic
@cindex Foreign definition
@cindex Definition, foreign
The basic rule is that anything defined in one of the library's source
files is @dfn{domestic}, and the rest is @dfn{foreign}. If for some
reason, the source file is unknown, then, the definition will be
considered domestic if the symbol naming it is from a domestic package.

This view on domesticity has implications on what is documented, which
are worth mentioning.
@itemize
@item
Language extensions (for example, new methods on standard generic
functions) and, in general, new local definitions on symbols from
foreign packages are considered domestic, and hence will appear in the
reference manual.
@item
Conversely, extensions to the library, but defined outside of it, will
@emph{not} be part of the resulting reference manual, as they will be
considered foreign.
@end itemize

Note that even though they are not normally meant to appear in the final
reference manual, @declt{} may be led to create foreign definitions
(sometimes a lot of them) as well as domestic ones. For example, if your
library adds a method to @code{make-instance}, @declt{} @emph{will}
internally create a (foreign) definition for the @code{make-instance}
generic function. Foreign definitions are never complete however
(otherwise, we would end up with a complete documentation for the whole
Lisp image): only the information relevant to the library is kept
around.

@fkindex{declt,foreign-definitions}
@fkindex{assemble,foreign-definitions}
As said before, it is possible to include those (partial) foreign
definitions in the documentation by using the
@code{:foreign-definitions} option to @code{declt} or @code{assemble}.
Continuing with the previous example, local methods on
@code{make-instance} normally appear as toplevel, standalone definitions
in the documentation, as they belong to a foreign generic function. If,
however, foreign definitions are included in the documentation, there
will be a toplevel (partial) entry for @code{make-instance}, and the
domestic methods will appear inside it (truly foreign methods will
@emph{never} be documented).

@c Introspection Levels
@c --------------------
@node Introspection Levels, Reports, Domesticity, Assessment
@subsection Introspection Levels
@cindex Introspection Levels
@fkindex{declt,introspection-level}
@fkindex{assess,introspection-level}
In order to discover both domestic and relevant foreign definitions,
@declt{} uses a heuristic which establishes different tradeoffs between
performance and accuracy. Remember that this is controlled by the
@code{:introspection-level} option to @code{declt} or @code{assess}.
This heuristic is based on the assumption that most libraries out there
are implemented within packages of their own.

Consequently, this is what happens by default (that is, at introspection
level 1). After the library has been loaded, @declt{} scans all live
packages and selects the domestic ones. It then scans all symbols from
these packages to find domestic definitions.

@cindex Finalization
Note that if we were to stop there, we would probably miss many domestic
definitions, namely, those on foreign symbols such as methods on
standard generic functions such as @code{make-instance}. Fortunately, a
lot of these will be recovered later on anyway, when @declt{} computes
cross-references between definitions in the so-called @dfn{finalization}
phase.

Suppose for instance that the library provides a new method on
@code{make-instance}. This method is domestic because it is defined in
one of the library's files, but at introspection level 1, @declt{} only
scans domestic symbols, so it will miss it (@code{common-lisp}, the home
package of the @code{make-instance} symbol, is foreign). On the other
hand, it is very likely that this method exists because it specializes
on a domestic class already known to @declt{}. When @declt{} finalizes a
class definition, it looks up methods that specialize on it (among other
things). These methods are in fact accessible through the class by
introspection (they are called ``direct methods''). Consequently,
@declt{} @emph{will} eventually discover the new @code{make-instance}
method, figure out that it is a domestic one, and add it to the
documentation.

In the end, it is probable that most domestic definitions end up being
discovered, either during the initial scanning phase, or later on,
during the finalization phase when cross-references are computed. This
is why the default introspection level is probably good enough most of
the time.

On the other hand, some (rare?) domestic definitions may still escape
the discovery process at that level. For example, if you define a
foreign global variable in one of your library's files, chances are that
there won't be any domestic definition cross-referencing it. This is why
@declt{} provides a second level of introspection, in which it initially
scans @emph{all} symbols in the @cl{} image, rather than just the ones
from domestic packages. The resulting documentation will then be more
complete, although at the expense of a @emph{much} greater computation
time.

And yes, you have just noticed that I said ``more complete'' rather than
``exhaustive'', and mind you, this is not because my vocabulary is
limited. The thing is that even with an initial scan of all symbols, we
may still miss some information. To be precise, we won't miss any
domestic definition. It is the cross-referencing information that may
remain incomplete, and that is because the finalization phase doesn't
re-scan each and every symbol in the Lisp image again; only the
definitions that have been created so far. Let's take an example
(granted, a contrived one; but aren't they all?). You define a regular
domestic function, and it is used as the update function in a foreign
setf expander. Even with an initial scan of all symbols in the Lisp
image, you'll get a definition for your domestic function, but that's
it. Later on, during the finalization process, there's no way to go from
the function to the setf expander, so that information remains unknown.
In order to fix that, the finalization process would need to re-scan the
whole Lisp world again, and that would become introspection level 3. Not
sure it's actually worth it; maybe one day@enddots{}

@c Reports
@c -------
@node Reports,  , Introspection Levels, Assessment
@subsection Reports
@cindex Report
@clsindex{report}
As mentioned before, the @code{assess} function returns an instance of
the @code{report} class. In case you want to manipulate reports
directly, a complete description of this class, its slots and accessors
is provided in the @declt{}
@ifinfo
@ref{Top, , Reference Manual, declt-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo
Several aspects of reports and their contents deserve a special mention
however. This is the purpose of this section.

@menu
* Definitions List::            Unorganized and flat
* Definitions::                 Hierarchy overview
@end menu

@node Definitions List, Definitions, Reports, Reports
@subsubsection Definitions List
@cindex Definitions List
@cindex Definition
@clssindex{report,definitions}
The most important slot in a @code{report} instance is the
@code{definitions} one. This is the slot which contains the whole list
of definitions (again, a @dfn{definition} is the abstract description of
something that needs to be documented). Because reports do not make any
assumption on the final organization of the reference manual (that is
the job of the assembly stage of the @declt{} pipeline; see
@ref{Assembly}), the list of definitions is completely flat and mostly
unorganized.

In terms of organization, the only guarantee you have is that the
library's main system definition comes first, and that does not even
mean first in the list (although it currently does), but first among all
system definitions. Apart from that, you shouldn't count on any kind of
ordering within that list.

Also, the list being flat means that every single definition appears as
a toplevel element. In other words, it really is a list of definitions,
as opposed to a tree of definitions. For instance, things that are
normally nested, such as ASDF modules or files (being part of a
super-component), slot definitions (being part of a class, structure, or
condition), methods (being part of a generic function), @etc{}, are
directly accessible in that list. You need to remember this if you ever
need to filter out the definitions you're not interested in.

On the other hand, this list being mostly unorganized and flat doesn't
mean that the programmatic order of things is completely lost. Many, if
not all definitions, contain cross-references to other definitions. For
example, ASDF system definitions point back to their dependencies,
classes to their slots, generic functions to their methods, @etc{} In
all these cases, the original definitions order is preserved.

@node Definitions,  , Definitions List, Reports
@subsubsection Definitions
@cindex Definition
@clsindex{definition}
Definitions are implemented as an object-oriented hierarchy rooted in
the @code{definition} class. The complete description of this hierarchy
is provided in the @declt{}
@ifinfo
@ref{Top, , Reference Manual, declt-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo
This section provides an overview of the hierarchy in question, along
with the most important remarks about it. Every definition class in the
hierarchy has a name of the form @code{foo-definition}. For concision,
and except for the @code{definition} and mixin classes, all class names
in the figures below are abbreviated: a @code{foo-definition} class is
simply denoted as @code{foo}. Abstract classes are drawn in red boxes
with bold text, regular classes in blue boxes with normal font, and
mixins (also abstract) in green ellipses with bold text.

@float Figure,fig:definitions
@ifinfo
@center@image{declt-user-data/definitions,7cm}
@end ifinfo
@ifnotinfo
@center@image{definitions,7cm}
@end ifnotinfo
@caption{Main definition categories}
@end float
@clsindex{definition}
@clsindex{component-definition}
@clsindex{package-definition}
@clsindex{symbol-definition}
As depicted in @ref{fig:definitions}, there are three main categories of
definitions: @code{component-definition} is the root class for ASDF
components, @code{package-definition} is the class for Lisp packages,
and @code{symbol-definition} is the root class of all programmatic
definitions named by symbols. The @code{definition} root class provides
common properties, such as a reference to the corresponding Lisp object
(when applicable), source information, and foreign status.

@float Figure,fig:components
@ifinfo
@center@image{declt-user-data/components,9cm}
@end ifinfo
@ifnotinfo
@center@image{components,9cm}
@end ifnotinfo
@caption{ASDF component definitions}
@end float
@clsindex{component-definition}
@clsindex{module-definition}
@clsindex{system-definition}
@clsindex{file-definition}
@clsindex{source-file-definition}
@clsindex{lisp-file-definition}
@clsindex{system-file-definition}
@clsindex{c-file-definition}
@clsindex{java-file-definition}
@clsindex{static-file-definition}
@clsindex{doc-file-definition}
@clsindex{html-file-definition}
@ref{fig:components} depicts the hierarchy of ASDF definitions.
Unsurprisingly, this hierarchy closely follows that of actual ASDF
components, although some peculiarities are worth mentioning here.
@itemize
@item
@clsindex{cl-source-file}
The @code{lisp-file-definition} class corresponds to the ASDF
@code{cl-source-file} one. Note that ASDF provides two additional
subclasses for Lisp files, with extensions @samp{.cl} and @samp{.lsp}.
We don't do that, however. Instead, there is a protocol for retrieving a
file component's extension.
@item
Notice the existence of a @code{system-file-definition} class, which is
a subclass of @code{lisp-file-definition}. In ASDF, system files are
@emph{not} represented as components, but @declt{} pretends they are by
faking a particular class of Lisp files for them. This allows us to
document @code{.asd} files as particular Lisp files, without too much
specific code. Note also that some (few) libraries list their system
files (for example as static files) in the system definition. @declt{}
is aware of this and removes such definitions, so as to avoid
duplication.
@end itemize

The hierarchy of definitions named by symbols (under the
@code{symbol-definition} class) is quite large, so it is split into four
figures.

@clsindex{symbol-definition}
@cindex Varoid
@float Figure,fig:varoids
@ifinfo
@center@image{declt-user-data/varoids,13cm}
@end ifinfo
@ifnotinfo
@center@image{varoids,13cm}
@end ifnotinfo
@caption{Varoid definitions}
@end float
The @dfn{varoid} ones (@ref{fig:varoids}) represent simple values having
symbolic names. This boils down to variables, symbol macros, and slots.

@cindex Funcoid
@cindex Setfable funcoid
@cindex Funcoid, setfable
@float Figure,fig:funcoids
@ifinfo
@center@image{declt-user-data/funcoids,16cm}
@end ifinfo
@ifnotinfo
@center@image{funcoids,16cm}
@end ifnotinfo
@caption{Funcoid definitions}
@end float
@clsindex{combination-definition}
@cindex Method combination, @t{standard}
@cindex Standard method combination
The @dfn{funcoid} ones (@ref{fig:funcoids}) covers ``parametric
values'', that is, values having a lambda-list of some sort. This
includes all variations on functions, macros, methods, types, setf
expanders, and method combinations. You may wonder why the
@code{combination-definition} class is not abstract. That is because the
standard method combination is an instance of it. All funcoids have a
slot indicating whether the definition is a setf one (@eg{} a function
named @code{(setf foo)}). The ``setfable'' branch represents definitions
that may be related to a setf expander (that is, which could be either
an @dfn{access-fn} or an @dfn{update-fn}). As a matter of fact, this
hierarchy is not 100% correct: some funcoids can never be setf ones, and
some setfable ones can never be related to a setf expander. On the other
hand, doing it like this keeps said hierarchy relatively simple.

@cindex Accessor mixin
@cindex Mixin, accessor
@cindex Generic reader
@cindex Reader, generic
@cindex Generic writer
@cindex Writer, generic
@clsindex{accessor-mixin}
The ``accessor'' sub-branches represent definitions for methods,
ordinary, or generic functions, which have been identified as reading or
writing slots. The accessor mixin provides a back reference to the slot
definition in question. Note that generic functions do not access slots;
only their methods do (which is why the generic accessor branch does not
use the accessor mixin). A generic function will be qualified as a
@dfn{generic reader} (respectively a @dfn{generic writer}) if all its
methods have been identified as reader (respectively writer) methods.

@float Figure,fig:classoids
@ifinfo
@center@image{declt-user-data/classoids,12cm}
@end ifinfo
@ifnotinfo
@center@image{classoids,12cm}
@end ifnotinfo
@caption{Classoid definitions}
@end float
@cindex Classoid
@cindex CLOS classoid mixin
@cindex Mixin, CLOS classoid
@clsindex{clos-classoid-mixin}
The @dfn{classoid} branch (@ref{fig:classoids}) represents (typed)
structures, classes, and conditions. This part of the definitions
hierarchy is probably not portable, as it relies on how SBCL implements
a number of things, in particular, which classoids are in fact CLOS
classes, which is represented by the CLOS classoid mixin. The CLOS
classoid mixin provides super- and sub-classoid information, but this
may change in the future. Indeed, it is perhaps possible to trace back
@code{:include} information for typed structures as well, but this is
not currently implemented.

@float Figure,fig:aliases
@ifinfo
@center@image{declt-user-data/aliases,12cm}
@end ifinfo
@ifnotinfo
@center@image{aliases,12cm}
@end ifnotinfo
@caption{Alias definitions}
@end float
@cindex Alias
Finally, the last group of symbol definitions is for @dfn{aliases}, that
is, globally defined (compiler) macros or functions that are also
manually attached to other symbols. Aliases are known to @declt{} so as
to avoid duplicating documentation.


@c --------
@c Assembly
@c --------
@node Assembly, Typesetting, Assessment, Pipeline Usage
@section Assembly


@c -----------
@c Typesetting
@c -----------
@node Typesetting,  , Assembly, Pipeline Usage
@section Typesetting



@c ====================================================================
@c Other Considerations
@c ====================================================================
@node Other Considerations, Conclusion, Pipeline Usage, Top
@chapter Other Considerations
This section contains marginal or meta-information, orthogonal to the
library's main purpose.

@menu
* Configuration::               Preload parameters
* Version Numbering::           In case you need to conditionalize
@end menu


@c -------------
@c Configuration
@c -------------
@node Configuration, Version Numbering, Other Considerations, Other Considerations
@section Configuration
@cindex Configuration
@sysindex{net.didierverna.declt.setup}@c
@pkgindex{net.didierverna.declt.setup}@c
Some aspects of @declt{}'s behavior can be configured @emph{before} the
library system is actually loaded. @declt{} stores its user-level
configuration (along with some other setup parameters) in another ASDF
system called @samp{net.didierverna.declt.setup} (and the eponym
package). In order to configure the library (I repeat, prior to loading
it), you will typically do something like this:
@verbatim
(require "asdf")
(asdf:load-system :net.didierverna.declt.setup)
(net.didierverna.declt.setup:configure <option> <value>)
@end verbatim

@defun configure KEY VALUE
Set @var{KEY} to @var{VALUE} in the current @declt{} configuration.
@end defun

Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
@defun configuration KEY
Return @var{KEY}'s value in the current @declt{} configuration.
@end defun

Currently, the following options are provided.
@table @t
@item :swank-eval-in-emacs
@coindex{swank-eval-in-emacs}
@vindex slime-enable-evaluate-in-emacs
This option is only useful if you use Slime, and mostly if you plan on
hacking @declt{} itself. The library provides indentation information
for some of its functions directly embedded in the code. This
information can be automatically transmitted to Emacs when the ASDF
system is loaded if you set this option to @code{t}. However, note that
for this to work, the Slime variable
@code{slime-enable-evaluate-in-emacs} must also be set to @code{t} in
your Emacs session. If you're interested to know how this process works,
I have described it in this
@url{http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack,blog
entry}.
@end table


@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering,  , Configuration, Other Considerations
@section Version Numbering
As @declt{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library.

The first thing you can do to access the current version number of
@declt{} is use the @code{version} function.

@defun version &optional (TYPE :number)
Return the current version number of @declt{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

A @declt{} version is characterized by 4 elements as described below.
@itemize
@item
@pvindex{*release-major-level*}
A major version number stored in the parameter
@code{*release-major-level*}.
@item
@pvindex{*release-minor-level*}
A minor version number, stored in the parameter
@code{*release-minor-level*}.
@item
@pvindex{*release-status*}
A release status stored in the parameter @code{*release-status*}. The
status of a release can be @code{:alpha}, @code{:beta}, @code{:rc}
(standing for ``release candidate'') or @code{:patchlevel}. These are in
effect 4 levels of expected stability.
@item
@pvindex{*release-status-level*}
A status-specific version number stored in the parameter
@code{*release-status-level*}. Status levels start at 1 (alpha 1, beta 1
and release candidate 1) except for stable versions, in which case patch
levels start at 0 (@eg{} 2.4.0).
@end itemize

@pvindex{*release-name*}
In addition to that, each version of @declt{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in the
parameter @code{*release-name*}. The general naming theme for @declt{}
is ``Star Trek Characters''.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major . 10000 + minor .
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and release candidate status are ignored in version
numbers (this is as if the corresponding status level was considered to
be always 0). Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2rc1. Remember that alpha, beta or release candidate
levels start at 1. Patchlevels for stable releases start at 0 but 0 is
ignored in the output. So for instance, version 4.3.2 will appear as-is,
while version 1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Uhura", 2.5 beta 8 "Scotty",
4.2 release candidate 1 "Spock" or 4.3.2 "Counselor Troy". As for the
short version, a patchlevel of 0 is ignored in the output: 1.3 "Uhura".
@end itemize

@vindex *copyright-years*
Incidentally, but you will probably never need to use it, @declt{} also
exports a variable named @code{*copyright-years*}, which, as its name
suggests, is a string denoting the copyright years for the whole
project.



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Documentation Tuning, Other Considerations, Top
@chapter Conclusion
So that's it I guess. You know all about @declt{} now. The next step is
to polish your own libraries so that @declt{} can extract meaningful
documentation from them.

Then, you will want to run @declt{} on all the other libraries you use,
in order to finally know how they work.

Now, go my friend. Go document the whole Lisp world!



@c ====================================================================
@c Documentation Tuning
@c ====================================================================
@node Documentation Tuning, Supported Platforms, Conclusion, Top
@appendix Documentation Tuning

@menu
* Coding Style::                Another way to influence the output
* Pretty Printing::             Things are not what they seem
* Caveats::                     Current limitations
@end menu

@c -------------
@c Coding Style
@c -------------
@node Coding Style, Pretty Printing, Documentation Tuning, Documentation Tuning
@section Coding Style
Some elements of your own coding style will affect the reference manuals
generated by @declt{}. This section provides some recommendations that
will make the generated output look nicer.

@menu
* Taglines::                    Influence the subtitle
* Docstrings::                  Influence the concatenation of definitions
@end menu

@node Taglines, Docstrings, Coding Style, Coding Style
@subsection Taglines
@fkindex{declt,tagline}
Unless you provide it with an explicit @code{:tagline} argument,
@code{declt} uses the system's long name or description (provided they
are one-liners) to construct a subtitle. Consequently, it is advisable to
use a single (short) line of text for these slots. The system's long
name should typically be the expansion of the system's name, if that's
an acronym, or be left to @nil{}.

@node Docstrings,  , Taglines, Coding Style
@subsection Docstrings
@declt{} tries to make the generated output look nicer in various ways.
For example, setf functions are documented right after the corresponding
reader (if any) instead of being listed under the ``S'' letter. In a
similar vein, methods are documented as components of their respective
generic function, not as toplevel definitions (except for foreign
methods without a corresponding generic function definition).

One thing that you can influence is @declt{}'s attempt at merging
definitions. Merging may occur when there are definitions for both
@code{symbol} and @code{(setf symbol)}. This happens for accessor
functions, generic functions or setf expanders. This also happens for
accessor methods. If possible, @declt{} will try to generate a
@emph{single} definition for both the reader and the writer. That is
only possible, however, if both definitions would render the same
documentation, @ie{} same package, source file and docstring.

If you don't provide a docstring, merging will work. If you provide
different docstrings (like ``Set the value of @dots{}'' and ``Get the
value of @dots{}''), you will effectively prevent merging from
happening. One thing I like to do is to provide the @emph{same} neutral
docstring for readers and writers. For instance ``Access the value of
@dots{}''. This way, definitions can both provide a docstring and be
merged together.


@c ---------------
@c Pretty Printing
@c ---------------
@node Pretty Printing, Caveats, Coding Style, Documentation Tuning
@section Pretty Printing
@cindex Pretty printing
@findex declt
@fkindex{declt,introduction}
@fkindex{declt,conclusion}
All text coming from either @cl{} or one of @code{declt}'s
initialization arguments (@code{:introduction} and @code{:conclusion}
excepted) is properly escaped for the Texinfo format, so you don't need
to worry about that.

@cindex Pretty printing, blank
In non-verbatim contexts, @declt{} attempts to pretty-print symbols the
names of which would otherwise be problematic. In particular, the empty
symbol (@t{||}) is denoted as the math empty set, and blank characters
(spaces, tabs, and newlines), are replaced by more explicit Unicode
symbols. Note that this means that even for Info output, a Unicode
reader is required.

@cindex Pretty printing, docstring
@declt{} also attempts to do some pretty printing on things like
docstrings, system long description @etc{}. Currently, there's a simple
heuristic that tries to detect short lines that should probably stand on
their own (with an explicit line break). For every piece of text,
@declt{} first calculates the longest line and bases its line breaking
decision on that. In the future, it will be possible to bypass this
calculation by specifying an intended line width. Other pretty printers
will likely be made available as well.


@c -------
@c Caveats
@c -------
@node Caveats,  , Pretty Printing, Documentation Tuning
@section Caveats
@declt{} currently has two main limitations that you need to understand
in order to avoid bad surprises, plus some less serious design decisions
that are still worth knowing.

@menu
* SBCL Only::                   Declt is not portable yet
* Method Combinations::         Please behave
* Anchor Names::                Some characters are problematic
@end menu

@node SBCL Only, Method Combinations, Caveats, Caveats
@subsection SBCL Only
@sysindex{sb-introspect}
First, @declt{} is an SBCL-only library. That is because it relies on
@t{sb-introspect}. This limitation may be lifted in the future by using
equivalent API from other @cl{} implementations, but in the meantime,
this means two things.

@enumerate
@item
@declt{} can only document libraries that work with SBCL, because it
needs to load them (@pxref{Introduction}).
@item
If your ASDF system contains vendor-specific modules or components,
@declt{} will only be able to document SBCL-specific ones.
@end enumerate

Note that more generally, @declt{} only documents modules or components
that ASDF actually loads, so if your system definition contains some
form of conditional inclusion, this will affect the generated
documentation.

@node Method Combinations, Anchor Names, SBCL Only, Caveats
@subsection Method Combinations
@cindex Method combination
The method combination interface in @cl{} is underspecified. In
particular, although you define method combinations globally, changing
them afterwards may not affect already created generic functions. As a
result, you could in theory end up with @emph{many} different method
combinations with the same name, used in various generic functions. See
this
@url{http://www.didierverna.net/blog/index.php?post/2013/08/16/Lisp-Corner-Cases%3A-Method-Combinations,
blog entry} and this
@url{https://www.lrde.epita.fr/~didier/research/publications/papers.php#verna.18.els,article}
for more explanations.

@declt{} assumes however that you have some sanity and only define
method combinations once per name. They are documented as top level
items and generic functions using them provide cross-references.


@node Anchor Names,  , Method Combinations, Caveats
@subsection Anchor Names
@cindex Anchor name
Because of the Texinfo anchor syntax, some characters are very
problematic (or even completely prohibited) in anchor names. In order to
provide robust anchors, @declt{} transforms those characters into
Unicode alternatives, resembling the original ones, but not quite the
same. This is normally not a problem, but you may get bitten by this if
you ever happen to attempt a copy/paste operation from an Info anchor or
an HTML hyperlink (PDF links are fine): while the link may look like the
original Lisp symbol, some characters will actually be different. More
specifically, dots, commas, colons, parentheses, and backslashes will be
replaced by close Unicode symbols. Additionally, the ampersand is turned
upside down, so this one will be noticeable@dots{}



@c ====================================================================
@c Supported Platforms
@c ====================================================================
@node Supported Platforms, Indexes, Documentation Tuning, Top
@appendix Supported Platforms
@sysindex{sb-introspect}
@declt{} requires ASDF 3 and SBCL 2.3.1 or later. Other Lisp
implementations are not currently supported, but may be in the future.
Besides, SBCL needs to be compiled with support for
@t{:sb-xref-for-internals}. This can be achieved by passing the
@option{--with-sb-xref-for-internals} option (or @option{--fancy}, which
includes it) to the @file{make.sh} build script.

The Texinfo code that @declt{} generates requires Makeinfo 6.7, and
contains extended Unicode characters (so even for reading Info, Unicode
support is necessary).

In order to compile and install the user manuals on your own, you will
need @command{makeinfo} / @command{install-info}, @command{convert}
(from Image Magick), @command{dot}, and @command{graph-easy} (from the
Graph::Easy Perl library).



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, Acknowledgments, Supported Platforms, Top
@appendix Indexes

@menu
* Concept Index::               Well, the concept index
* Function Index::              Well, the function index
* Variable Index::              Well, the variable index
* Data Type Index::             Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp
@page


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn
@page


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr
@page


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index,  , Variable Index, Indexes
@section Data Types
@printindex tp



@c ====================================================================
@c Acknowledgments
@c ====================================================================
@node Acknowledgments,  , Indexes, Top
@appendix Acknowledgments
The following people have contributed bug reports or fixes, suggestions,
compiler support or any other kind of help. You have my gratitude!

@multitable @columnfractions .99
@item BR. Fenn Pocock
@item Sabra Crolleton
@item Robert Goldman
@item Steve Nunez
@item Gavin Smith
@item Alexander Staudt
@end multitable


@bye

@c Local Variables:
@c TeX-master: t
@c End:

@c  LocalWords:  Declt cindex declt dfn setf ifinfo ref ifhtml url uref
@c  LocalWords:  ifnotinfo ifnothtml xref findex cartouche asdf samp ql
@c  LocalWords:  clsindex pxref sysindex quickload pkgindex defun var
@c  LocalWords:  makeinfo fkindex tagline Taglines mailto pvindex emph
@c  LocalWords:  cl enddots subsubsection clssindex java doc html lsp
@c  LocalWords:  asd Varoid varoids varoid Funcoid Setfable funcoid eg
@c  LocalWords:  setfable funcoids fn Classoid classoid clos eval Verna
@c  LocalWords:  classoids coindex vindex fixnum rc patchlevel ie sb cp
@c  LocalWords:  Patchlevels Docstrings docstring docstrings printindex
@c  LocalWords:  underspecified vr tp multitable columnfractions BR dvi
@c  LocalWords:  Fenn Pocock Sabra Crolleton texi texinfo Didier Riker
@c  LocalWords:  TORTIOUS setfilename settitle afourpaper perse foindex
@c  LocalWords:  documentencoding setchapternewpage documentdescription
@c  LocalWords:  cvindex tpindex dircategory direntry titlepage vskip
@c  LocalWords:  filll insertcopying ifnottex ps pdf mit bsd gpl lgpl
@c  LocalWords:  Uhura Spock homepage localref

@c user.texi ends here
